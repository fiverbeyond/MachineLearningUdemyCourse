hello world
print("Hello World!")
setwd("~/Deep Learning/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 6 - Polynomial Regression")
dataset = read.csv('Position_Salaries.csv')
View(dataset)
View(dataset)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 1:2]
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3]
library(caTools)
library(caTools)
# Feature Scaling
# training_set[, 2:3] = scale(training_set[,2:3])
# test_set[, 2:3] = scale(test_set[,2:3])
regressor = lm(formula = Level ~ Salary,  # Specify the relationship being examined
data = dataset)
regressor = lm(formula = Salary ~ .,  # Specify the relationship being examined
data = dataset)                 # The data that will be used for learning.
summary(regressor)
dataset$Level2 = dataset$Level^2
poly_reg = lm(formual = Salary ~ .,
data = dataset)
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
dataset$Level3 = dataset$Level^3
poly_reg = lm(formula = Salary ~ .,
data = dataset)
summary(poly_reg)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
ggplot() +
geompoint(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geomline(aes(x = dataset$Level, y = predict(regressor, new_data = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, new_data = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3] # Second column inclusive.
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, new_data = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, new_data = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
dataset$Level3 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, new_data = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, new_data = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
y_pred = predict(regressor, 6.5)
y_pred = predict(regressor, data.frame(Level = 6.5))
y_pred = predict(regressor, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
y_pred = predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
setwd("~/Deep Learning/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 7 - Support Vector Regression (SVR)")
install('e1071')
install.packages('e1071')
library(e1071)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3] # Second column inclusive.
library(e1071)
regressor = svm(formula = Salary ~ .,
data = dataset,
type = eps-regression)
regressor = svm(formula = Salary ~ .,
data = dataset,
type = 'eps-regression')
y_pred = predict(regressor, data.frame(Level = 6.5))
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, new_data = dataset)),
colour = 'blue') +
ggtitle('Support Vector Regression') +
xlab('Level') +
ylab('Salary')
X_grid = seq(min(dataset$Level), max(dataset$Salary), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_reg, new_data = data.frame(Level = X_grid))),
colour = 'blue') +
ggtitle('Support Vector Regression') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, new_data = dataset)),
colour = 'blue') +
ggtitle('Support Vector Regression') +
xlab('Level') +
ylab('Salary')
setwd("~/Deep Learning/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 8 - Decision Tree Regression")
install.packages('rpart')
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset)
y_pred = predict(regressor, data.frame(Level = 6.5)
regressor = rpart(formula = Salary ~ .,
data = dataset)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3] # Second column inclusive.
regressor = rpart(formula = Salary ~ .,
data = dataset)
y_pred = predict(regressor, data.frame(Level = 6.5))
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, new_data = dataset)),
colour = 'blue') +
ggtitle('Decision Tree Regression') +
xlab('Level') +
ylab('Salary')
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, new_data = dataset)),
colour = 'blue') +
ggtitle('Decision Tree Regression') +
xlab('Level') +
ylab('Salary')
X_grid = seq(min(dataset$Level), max(dataset$Salary), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, new_data = data.frame(Level = X_grid))),
colour = 'blue') +
ggtitle('Decision Tree Regression') +
xlab('Level') +
ylab('Salary')
X_grid = seq(min(dataset$Level), max(dataset$Salary), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, new_data = data.frame(Level = X_grid))),
colour = 'blue') +
ggtitle('Decision Tree Regression') +
xlab('Level') +
ylab('Salary')
X_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, new_data = data.frame(Level = X_grid))),
colour = 'blue') +
ggtitle('Decision Tree Regression') +
xlab('Level') +
ylab('Salary')
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
X_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, new_data = data.frame(Level = X_grid))),
colour = 'blue') +
ggtitle('Decision Tree Regression') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = X_grid, y = predict(regressor, new_data = data.frame(Level = X_grid))),
colour = 'blue') +
ggtitle('Decision Tree Regression') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = X_grid, y = predict(regressor, new_data = data.frame(Level = X_grid))),
colour = 'blue') +
ggtitle('Decision Tree Regression') +
xlab('Level') +
ylab('Salary')
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = X_grid, y = predict(regressor, new_data = data.frame(Level = X_grid))),
colour = 'blue') +
ggtitle('Decision Tree Regression') +
xlab('Level') +
ylab('Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, new_data = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Decision Tree Regression') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(object = regressor, new_data = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Decision Tree Regression') +
xlab('Level') +
ylab('Salary')
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Salary, SplitRatio = 2/3)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Decision Tree Regression to the dataset
# install.packages('rpart')
library(rpart)
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 1))
# Predicting a new result with Decision Tree Regression
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Decision Tree Regression results (higher resolution)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, new_data = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Decision Tree Regression') +
xlab('Level') +
ylab('Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, new_data = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Decision Tree Regression') +
xlab('Level') +
ylab('Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Decision Tree Regression)') +
xlab('Level') +
ylab('Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, new_data = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Decision Tree Regression') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Decision Tree Regression') +
xlab('Level') +
ylab('Salary')
regressor = rpart(formula = Salary ~ .,
data = dataset,
control = rpart.control(minsplit = 2))
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Decision Tree Regression') +
xlab('Level') +
ylab('Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Decision Tree Regression') +
xlab('Level') +
ylab('Salary')
setwd("~/Deep Learning/Machine Learning A-Z Template Folder/Part 2 - Regression/Section 9 - Random Forest Regression")
install.packages('randomForest')
library(randomForest)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[, 2:3] # Second column inclusive.
library(randomForest)
set.seed(1234)
regressor = randomForest(x = dataset$Level,
y = dataset$Salary,
ntree = 10) # Number of trees in the forest.
regressor = randomForest(x = dataset[$1],
y = dataset$Salary,
ntree = 10) # Number of trees in the forest.
regressor = randomForest(x = dataset[1],
y = dataset$Salary,
ntree = 10) # Number of trees in the forest.
regressor = randomForest(x = dataset[1],  # Note in the description for this object, x is a dataframe...
y = dataset$Salary, #... but Y is a vector. Why? I don't know.
ntree = 10) # Number of trees in the forest.
library(ggplot2)
# We'll use the higher-resolution display, since this is a non-contiguous model.
# define range and increment to produce the sequence.
X_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = X_grid, y = predict(regressor, new_data = data.frame(Level = X_grid))),
colour = 'blue') +
ggtitle('Polynomial Regression') +
xlab('Level') +
ylab('Salary')
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = X_grid, y = predict(regressor, newdata = data.frame(Level = X_grid))),
colour = 'blue') +
ggtitle('Polynomial Regression') +
xlab('Level') +
ylab('Salary')
y_pred = predict(regressor, data.frame(Level = 6.5))
library(randomForest)
set.seed(1234)
# Fit random forest regression model to the dataset.
regressor = randomForest(x = dataset[1],  # Note in the description for this object, x is a dataframe...
y = dataset$Salary, #... but Y is a vector. Why? I don't know.
ntree = 10) # Number of trees in the forest.
X_grid = seq(min(dataset$Level), max(dataset$Level), 0.01)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = X_grid, y = predict(regressor, newdata = data.frame(Level = X_grid))),
colour = 'blue') +
ggtitle('Polynomial Regression') +
xlab('Level') +
ylab('Salary')
y_pred = predict(regressor, data.frame(Level = 6.5))
regressor = randomForest(x = dataset[1],  # Note in the description for this object, x is a dataframe...
y = dataset$Salary, #... but Y is a vector. Why? I don't know.
ntree = 100) # Number of trees in the forest.
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = X_grid, y = predict(regressor, newdata = data.frame(Level = X_grid))),
colour = 'blue') +
ggtitle('Polynomial Regression') +
xlab('Level') +
ylab('Salary')
y_pred = predict(regressor, data.frame(Level = 6.5))
regressor = randomForest(x = dataset[1],  # Note in the description for this object, x is a dataframe...
y = dataset$Salary, #... but Y is a vector. Why? I don't know.
ntree = 500) # Number of trees in the forest.
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary), # show the data as a set of points.
colour = 'red') +
geom_line(aes(x = X_grid, y = predict(regressor, newdata = data.frame(Level = X_grid))),
colour = 'blue') +
ggtitle('Polynomial Regression') +
xlab('Level') +
ylab('Salary')
y_pred = predict(regressor, data.frame(Level = 6.5))
