library(ElemStatLearn)
set = training_set_pca
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('V1', 'V2')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Training_set_PCA)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red4'))
# Kernel PCA
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,3:5]
# Split into training and test sets.
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[, 1:2] = scale(training_set[,1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
# Apply Kernel PCA trick
#install.packages('kernlab')
library(kernlab)
kpca = kpca(~., data = training_set[-3], #-3 to exclude the dependent variable.
kernel = 'rbfdot',            # standard kernel trick
features = 2)
training_set_pca = as.data.frame(predict(kpca, training_set))
training_set_pca$Purchased = training_set$Purchased
test_set_pca = as.data.frame(predict(kpca, test_set))
test_set_pca$Purchased = test_set$Purchased
# Fitting Logistic Regression to the training set.
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set_pca)
# Predicting the test set results
prob_pred = predict(classifier, type = 'response', newdata = test_set_pca[-3])
y_pred = ifelse(prob_pred > 0.5, 1, 0)
# Making the Confusion Matrix
cm = table(test_set_pca[, 3], y_pred)
#Visualising the Training Set results
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set_pca
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('V1', 'V2')
prob_set = predict(classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Training_set_PCA)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red4'))
# Kernel PCA
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,3:5]
# Split into training and test sets.
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[, 1:2] = scale(training_set[,1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
# Apply Kernel PCA trick
#install.packages('kernlab')
library(kernlab)
kpca = kpca(~., data = training_set[-3], #-3 to exclude the dependent variable.
kernel = 'rbfdot',            # standard kernel trick
features = 2)
training_set_pca = as.data.frame(predict(kpca, training_set))
training_set_pca$Purchased = training_set$Purchased
test_set_pca = as.data.frame(predict(kpca, test_set))
test_set_pca$Purchased = test_set$Purchased
# Fitting Logistic Regression to the training set.
classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set_pca)
# Predicting the test set results
prob_pred = predict(classifier, type = 'response', newdata = test_set_pca[-3])
y_pred = ifelse(prob_pred > 0.5, 1, 0)
# Making the Confusion Matrix
cm = table(test_set_pca[, 3], y_pred)
# Kernel PCA
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[,3:5]
# Split into training and test sets.
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[, 1:2] = scale(training_set[,1:2])
test_set[, 1:2] = scale(test_set[, 1:2])
setwd("~/GitHub/MachineLearningUdemyCourse/Part 10 - Model Selection & Boosting/Section 48 - Model Selection")
install.packages('caret')
# Import the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# Install.packages('catools')
library(caTools)
set.seed(123)
split = sample.splite(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
#Fitting Kernel SVM to the Training set
# install.packages('e1071')
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'radial')
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
#Applying k-fold cross-validation
#install.packages('caret')
library(caret)
folds = createFolds(training_set$Purchased, k = 10) # Create 10 folds
cv = lapply(folds, function(x) { #This function here will implement k-fold cross validation.
training_fold = training_set[-x, ]
test_fold = training_set[x]  # X is our selected test fold.
classifier = svm(formula = Purchased ~.,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
y_pred = predict(classifier, newdata = test_fold[-3])
# Make the confusion matrix
cm = table(test_fold[, 3], y_pred)
# Compute the accuracy.
# Number of correct predictions / number of total datapoints
accuracy = (cm[1,1] + cm [2,2] / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1]))
return(accuracy)
})
#K-fold cross validation study. Built from scratch Aug. 1st, 2019
# Import the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# Install.packages('catools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
#Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
#Fitting Kernel SVM to the Training set
# install.packages('e1071')
library(e1071)
classifier = svm(formula = Purchased ~ .,
data = training_set,
type = 'C-classification',
kernel = 'radial')
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
#Applying k-fold cross-validation
#install.packages('caret')
library(caret)
folds = createFolds(training_set$Purchased, k = 10) # Create 10 folds
cv = lapply(folds, function(x) { #This function here will implement k-fold cross validation.
training_fold = training_set[-x, ]
test_fold = training_set[x]  # X is our selected test fold.
classifier = svm(formula = Purchased ~.,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
y_pred = predict(classifier, newdata = test_fold[-3])
# Make the confusion matrix
cm = table(test_fold[, 3], y_pred)
# Compute the accuracy.
# Number of correct predictions / number of total datapoints
accuracy = (cm[1,1] + cm [2,2] / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1]))
return(accuracy)
})
folds = createFolds(training_set$Purchased, k = 10) # Create 10 folds
cv = lapply(folds, function(x) { #This function here will implement k-fold cross validation.
training_fold = training_set[-x, ]
test_fold = training_set[x, ]  # X is our selected test fold.
classifier = svm(formula = Purchased ~.,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
y_pred = predict(classifier, newdata = test_fold[-3])
# Make the confusion matrix
cm = table(test_fold[, 3], y_pred)
# Compute the accuracy.
# Number of correct predictions / number of total datapoints
accuracy = (cm[1,1] + cm [2,2] / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1]))
return(accuracy)
})
cv
folds = createFolds(training_set$Purchased, k = 10) # Create 10 folds
cv = lapply(folds, function(x) { #This function here will implement k-fold cross validation.
training_fold = training_set[-x, ]
test_fold = training_set[x, ]  # X is our selected test fold.
classifier = svm(formula = Purchased ~.,
data = training_fold,
type = 'C-classification',
kernel = 'radial')
y_pred = predict(classifier, newdata = test_fold[-3])
# Make the confusion matrix
cm = table(test_fold[, 3], y_pred)
# Compute the accuracy.
# Number of correct predictions / number of total datapoints
accuracy = ((cm[1,1] + cm [2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1]))
return(accuracy)
})
cv
accuracy = mean(as.numeric(cv))
